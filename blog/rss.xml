<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LIPS Scheme blog</title>
        <link>https://jcubic.github.io/lips-website/blog</link>
        <description>LIPS Scheme blog RSS Feed</description>
        <lastBuildDate>Sat, 09 Mar 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>Copyright Â© 2024 Jakub T. Jankiewicz</copyright>
        <item>
            <title><![CDATA[Scheme Regex literals in Emacs]]></title>
            <link>https://jcubic.github.io/lips-website/blog/emacs-scheme-regex</link>
            <guid>https://jcubic.github.io/lips-website/blog/emacs-scheme-regex</guid>
            <pubDate>Sat, 09 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[LIPS Scheme support regular expression literals, but it's not the only one implementation that]]></description>
            <content:encoded><![CDATA[<p>LIPS Scheme support regular expression literals, but it's not the only one implementation that
support those.  Other implementation includes <a href="https://practical-scheme.net/gauche/" target="_blank" rel="noopener noreferrer">Gauche</a> and
<a href="https://www.gnu.org/software/kawa/index.html" target="_blank" rel="noopener noreferrer">Kawa</a>.</p>
<p>Unfortunetlly, you can easily use those regular expressions in <a href="https://en.wikipedia.org/wiki/GNU_Emacs" target="_blank" rel="noopener noreferrer">GNU
Emacs</a>, my main editor of choice.</p>
<p>The main problem is when using vertical bar character inside Scheme code in Emacs. GNU Emacs thinks
that the vertical bar is part of the <a href="https://jcubic.github.io/lips-website/docs/scheme-intro/data-types#symbols">symbol</a>:</p>
<div><div><pre tabindex="0"><code><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">str</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"foo bar"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">re</span><span class="token plain"> </span><span class="token regex" style="color:#36acaa">#/foo|bar/</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">;; | ))</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">str.match</span><span class="token plain"> </span><span class="token name">re</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">;; ==&gt; #("foo")</span>
</span></code></pre><div class="buttonGroup_6DOT"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_FhaS" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_phi_"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_FfTR"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This blog (the same as whole website) use modified PrismJS Scheme mode that supports regular
expressions. But in GNU Emacs there was a need to add <code>|</code> after a comment and close the lists that
were ignored by Emacs scheme mode (because they were inside symbol).</p>
<p>I asked a <a href="https://lists.gnu.org/archive/html/emacs-devel/2024-02/msg00896.html" target="_blank" rel="noopener noreferrer">question on emacs-devel mailing list</a>, on how to solve this problem. I didn't get any reply for days, then suddenly somone
<a href="https://lists.gnu.org/archive/html/emacs-devel/2024-03/msg00282.html" target="_blank" rel="noopener noreferrer">reply with this emacs lisp code snippet</a>.</p>
<div><div><pre tabindex="0"><code><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">(</span><span class="token defun keyword" style="color:#00009f">defun</span><span class="token defun"> </span><span class="token defun function" style="color:#d73a49">scheme-regex-patch</span><span class="token defun"> </span><span class="token defun punctuation" style="color:#393A34">(</span><span class="token defun arguments"></span><span class="token defun punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">setq-local</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">   syntax-propertize-function</span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">(</span><span class="token lambda keyword" style="color:#00009f">lambda</span><span class="token lambda"> </span><span class="token lambda punctuation" style="color:#393A34">(</span><span class="token lambda arguments argument variable" style="color:#36acaa">start</span><span class="token lambda arguments"> </span><span class="token lambda arguments argument variable" style="color:#36acaa">end</span><span class="token lambda punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">goto-char</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">funcall</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">syntax-propertize-rules</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">;; For #/regexp/ syntax</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"\\(#\\)/\\(\\\\/\\|\\\\\\\\\\|.\\)*?\\(/\\)"</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"|"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"|"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">;; For #; comment syntax</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"\\(#\\);"</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">prog1</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&lt; cn"</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">scheme-syntax-propertize-sexp-comment</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">point</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">point</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span>
</span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">add-hook</span><span class="token plain"> </span><span class="token quoted-symbol variable symbol" style="color:#36acaa">'scheme-mode-hook</span><span class="token plain"> </span><span class="token quoted-symbol variable symbol" style="color:#36acaa">'scheme-regex-patch</span><span class="token punctuation" style="color:#393A34">)</span>
</span></code></pre><div class="buttonGroup_6DOT"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_FhaS" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_phi_"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_FfTR"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And this solution works great.</p>]]></content:encoded>
            <category>scheme</category>
            <category>emacs</category>
        </item>
        <item>
            <title><![CDATA[LIPS History]]></title>
            <link>https://jcubic.github.io/lips-website/blog/lips-history</link>
            <guid>https://jcubic.github.io/lips-website/blog/lips-history</guid>
            <pubDate>Sun, 03 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the first article on LIPS blog. In this article I will write about the history of LIPS]]></description>
            <content:encoded><![CDATA[<p>This is the first article on LIPS blog. In this article I will write about the history of LIPS
Scheme interpreter.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-scheme">What is Scheme?<a href="https://jcubic.github.io/lips-website/blog/lips-history#what-is-scheme" class="hash-link" aria-label="Direct link to What is Scheme?" title="Direct link to What is Scheme?">â</a></h2>
<p>Scheme is a dialect of the Lisp. The second oldest programming language still in use (after
Fortran).  Lisp and Scheme have specific syntax with prefix notation and where everything is a list
(at least historically).  It's also <a href="https://en.wikipedia.org/wiki/Homoiconicity" target="_blank" rel="noopener noreferrer">Homoiconic</a>, which
means that code and data have the same represantion. This allows to write programs that modify the
code like it was data.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-lips">What is LIPS?<a href="https://jcubic.github.io/lips-website/blog/lips-history#what-is-lips" class="hash-link" aria-label="Direct link to What is LIPS?" title="Direct link to What is LIPS?">â</a></h2>
<p>LIPS name is a recursive ancronym which stands for <strong>"LIPS Is Pretty Simple"</strong>. LIPS Scheme is
implementation of Scheme programming language in JavaScript. It adds a lot of stuff on top of Scheme
to make it more powerful and easier to interact with JavaScript.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="history-of-lips">History of LIPS<a href="https://jcubic.github.io/lips-website/blog/lips-history#history-of-lips" class="hash-link" aria-label="Direct link to History of LIPS" title="Direct link to History of LIPS">â</a></h2>
<p>It all started in February 2018 when I've written the first version of Lisp interpreter. You can
still see the code on <a href="https://codepen.io/jcubic/pen/gvvzdp" target="_blank" rel="noopener noreferrer">CodePen</a>. Then I moved the
<a href="https://github.com/jcubic/lips" target="_blank" rel="noopener noreferrer">devlopment to GitHub</a> and named the project LIPS.  The first release
(version 0.2.0) is marked as Mar 2018.</p>
<p>At the begining it was Lisp based on Scheme, but at one point after version
<a href="https://github.com/jcubic/lips/releases/tag/0.20.1" target="_blank" rel="noopener noreferrer">0.20.1 dated as Jul 1, 2020</a>, I've started
adding features on devel branch and decided that I want full Scheme implementation. But it turns out
that there are way to many breaking changes to release next version. So I decided that I will
release it as beta-1.0. Since then, LIPS keep introducing new Beta versions. You can see the
<a href="https://github.com/jcubic/lips/releases" target="_blank" rel="noopener noreferrer">latest release on GitHub</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-of-lips">Future of LIPS<a href="https://jcubic.github.io/lips-website/blog/lips-history#future-of-lips" class="hash-link" aria-label="Direct link to Future of LIPS" title="Direct link to Future of LIPS">â</a></h2>
<p>For the future plans I want in final version 1.0 are implementation of continutations and Tail Calls
(<abbr title="Tail Call Optimization">TCO</abbr>) and to be compatibible (more or less) with
<a href="https://standards.scheme.org/" target="_blank" rel="noopener noreferrer">R<sup>7</sup>RS specification</a>. To see the progress you can check
<a href="https://github.com/jcubic/lips/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0" target="_blank" rel="noopener noreferrer">1.0 Milestone on GitHub</a>.</p>]]></content:encoded>
            <category>lips</category>
            <category>scheme</category>
            <category>history</category>
        </item>
    </channel>
</rss>